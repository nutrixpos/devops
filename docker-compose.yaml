services:

  posui:
    build:
      context: https://github.com/nutrixpos/posui.git#v0.1.7
      dockerfile: Dockerfile
      args:
        VITE_APP_ZITADEL_ISSUER: ${VITE_APP_ZITADEL_ISSUER}
        VITE_APP_BACKEND_HOST: ${VITE_APP_BACKEND_HOST}
        VITE_APP_MODULE_CORE_API_PREFIX: ${VITE_APP_MODULE_CORE_API_PREFIX}
        VITE_APP_ZITADEL_PROJECT_RESOURCE_ID: ${VITE_APP_ZITADEL_PROJECT_RESOURCE_ID}
        VITE_APP_ZITADEL_CLIENT_ID: ${VITE_APP_ZITADEL_CLIENT_ID}
        VITE_APP_ZITADEL_ENABLED: ${VITE_APP_ZITADEL_ENABLED}
        VITE_APP_APP_VERSION: ${VITE_APP_APP_VERSION}

    ports:
      - "3000:80"

    depends_on:
      - pos
      

  pos:
    build:
      context: https://github.com/nutrixpos/pos.git#v0.1.0
      dockerfile: Dockerfile  # Specify the Dockerfile if it's not named 'Dockerfile'
    ports:
      - "8000:8000"  # Map ports accordingly
    environment:
      - DATABASES_0_HOST=nutrix-db  # Set any necessary environment variables
      - DATABASES_0_DATABASE=nutrix
      - ZITADEL_DOMAIN=zitadel
      - ZITADEL_PORT=8080
    depends_on:
      nutrix-db:
        condition: service_healthy
        restart: true
      zitadel_healthcheck:
        condition: service_healthy
        restart: true
    volumes:
      # So that Traefik can listen to the Docker events
      - ./pos_mnt:/app/mnt

  nutrix-db:
    image: mongo:5.0
    environment:
      - MONGO_INITDB_ROOT_USERNAME=
      - MONGO_INITDB_ROOT_PASSWORD=
      - MONGO_INITDB_DATABASE=nutrix
    volumes:
      - ./data/mongo:/data/db
    healthcheck:
      test: ["CMD-SHELL", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: '10s'
      timeout: '30s'
      retries: 5
      start_period: '20s'
    
    ports:
      - 27017:27017

  
  zitadel_healthcheck:
    image: curlimages/curl:8.12.1
    depends_on:
      zitadel:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://zitadel:8080/healthz"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      sh -c "while true; do
        echo 'Waiting for web-service to be healthy...';
        sleep 10;
      done"


  zitadel:
    restart: 'always'
    image: 'ghcr.io/zitadel/zitadel:v2.67.1'
    command: 'start-from-init --masterkey "MasterkeyNeedsToHave32Characters" --tlsMode disabled'
    environment:
      - 'ZITADEL_DATABASE_POSTGRES_HOST=zitadel-db'
      - 'ZITADEL_DATABASE_POSTGRES_PORT=5432'
      - 'ZITADEL_DATABASE_POSTGRES_DATABASE=zitadel'
      - 'ZITADEL_DATABASE_POSTGRES_USER_USERNAME=zitadel'
      - 'ZITADEL_DATABASE_POSTGRES_USER_PASSWORD=zitadel'
      - 'ZITADEL_DATABASE_POSTGRES_USER_SSL_MODE=disable'
      - 'ZITADEL_DATABASE_POSTGRES_ADMIN_USERNAME=postgres'
      - 'ZITADEL_DATABASE_POSTGRES_ADMIN_PASSWORD=postgres'
      - 'ZITADEL_DATABASE_POSTGRES_ADMIN_SSL_MODE=disable'
      - 'ZITADEL_EXTERNALSECURE=false'
      - 'ZITADEL_EXTERNALDOMAIN=zitadel'
      - 'ZITADEL_EXTERNALPORT=8080'
    depends_on:
      zitadel-db:
        condition: 'service_healthy'

    ports:
      - "8080:8080"

    expose:
      - 8080
  

  zitadel-db:
    restart: 'always'
    image: postgres:16-alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=zitadel
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-d", "zitadel", "-U", "postgres"]
      interval: '10s'
      timeout: '30s'
      retries: 5
      start_period: '20s'
